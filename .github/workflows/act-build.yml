name: 0-build-snapshot-win
# 2023-10-05 23:20

on:
  workflow_dispatch:
    inputs:
      archive_all:
        description: archive_all
        type: boolean
        default: false
  workflow_call:
#  push:
#    paths:
#    - 'components/**'
#    - 'plugins/**'
#    - 'sdk/**'
#    - 'src/**'
#    branches:
#      - master

env:
  TAG_NAME: "sudo"
  TAG_REF:  "0000000"

#concurrency:
#  group: ${{ github.ref }}
#  cancel-in-progress: true

jobs:
  build-win:
    runs-on: windows-latest
    steps:

    - name: show public IP
      shell: bash
      run: |
        public_ip=$(curl ipinfo.io/ip)
        echo "IP:$public_ip:"

    - name: Checkout source
      uses: deep-soft/checkout@v3

    - name: Set PROG_VER
      shell: bash
      run: |
        set -x;
        cat Sudo/Build.pp
        _version_major_=$(grep "VERSION_MAJOR"       Sudo/Build.pp | awk -F = '{print $2}')  || true;
        _version_minor_=$(grep "VERSION_MINOR"       Sudo/Build.pp | awk -F = '{print $2}')  || true;
        _version_micro_=$(grep "VERSION_REVISION"    Sudo/Build.pp | awk -F = '{print $2}')  || true;
        echo "_version_major_ = $_version_major_";
        echo "_version_minor_ = $_version_minor_";
        echo "_version_micro_ = $_version_micro_";
        if [[ "$_version_major_" == "" ]]; then _version_major_=1; fi
        if [[ "$_version_minor_" == "" ]]; then _version_minor_=1; fi
        if [[ "$_version_micro_" == "" ]]; then _version_micro_=1; fi
        _prog_version_="$_version_major_.$_version_minor_.$_version_micro_";

        #_revision_=$(git -C $1 rev-list --count HEAD)
        _ref_all_=$(git log -1 --format='%H')
        # _ref_=$(echo ${_ref_all_::7})
        _date_=$(date +%Y%m%d)
        _ref_org_=${{ env.TAG_REF }}
        _ref_len_="${#_ref_org_}"
        _ref_=$(echo ${_ref_all_::$_ref_len_})
        _revision_=$_ref_

        echo "PROG_VER=$_prog_version_" >> $GITHUB_ENV;
        echo "PROG_REVISION=$_revision_" >> $GITHUB_ENV;

    - name: Print VER
      shell: bash
      run: |
        echo "PROG_VER=${{ env.PROG_VER }}";
        echo "PROG_REVISION=${{ env.PROG_REVISION }}";

    - name: create SHA_SUMS
      uses: deep-soft/sha-checksums@main
      with:
        type: sha256
        filename: '${{ env.TAG_NAME }}-${{ env.PROG_VER }}-win.sha256'
        directory: '.'
        path: '.'
        exclusions: '*node_modules* .editorconfig'
        debug: true
        ignore_git: true
        # checksums filename is ${{ env.SHA_SUMS }}

    - name: Upload artifact
      continue-on-error: true
      uses: deep-soft/upload-artifact@main
      with:
        name: ${{ env.TAG_NAME }}-${{ env.PROG_VER }}-win
        path: ${{ env.SHA_SUMS }}

    - name: Archive src Release
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        path: '.'
        directory: '.'
        filename: '${{ env.TAG_NAME }}-${{ env.PROG_VER }}-${{ env.PROG_REVISION }}-src-win.zip'
        exclusions: '*.git* /*node_modules/* .editorconfig sudo-release/* sudo.app'

    - name: list Archive src
      run: |
        echo 'arc name: ' ${{ env.ZIP_RELEASE_ARCHIVE }}
        ls -l ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: create release SHA_SUMS 
      uses: deep-soft/sha-checksums@main
      with:
        type: sha256
        filename: '${{ env.TAG_NAME }}-${{ env.PROG_VER }}-win-zip.sha256'
        directory: '.'
        path: "${{ env.ZIP_RELEASE_ARCHIVE }}"
        exclusions: '*node_modules* .editorconfig'
        debug: true
        ignore_git: true
        # checksums filename is ${{ env.SHA_SUMS }}

#    - name: Publish source Release
#      if: publish-source-archive
#      continue-on-error: true
#      uses: deep-soft/action-gh-release@v1
#      with:
#        draft: true
#        tag_name: ${{ env.TAG_NAME }}-${{ env.PROG_VER }}-${{ env.PROG_REVISION }}-win
#        files: |
#          ${{ env.ZIP_RELEASE_ARCHIVE }}
#          ${{ env.SHA_SUMS }}

    - name: Install Lazarus
      uses: deep-soft/setup-fpc@win
      with:
        lazarus-version: "2.2.6"

    - name: Build packages
      shell: cmd
      run: |
        call .github/scripts/create_snapshot_pv.bat

    - name: Publish Release
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: true
        tag_name: ${{ env.TAG_NAME }}-${{ env.PROG_VER }}-${{ env.PROG_REVISION }}-win
        files: |
          ./sudo-release/*.7z
          ./sudo-release/*.txt
          ${{ env.ZIP_RELEASE_ARCHIVE }}
          ${{ env.SHA_SUMS }}

    - name: Publish Release latest
      continue-on-error: true
      uses: deep-soft/action-gh-release@v1
      with:
        draft: false
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ./sudo-release/*.7z
          ./sudo-release/*.txt

    - name: Archive ALL
      if: ${{ inputs.archive_all }}
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: 'sets.zip'
        directory: '.'
        path: '.'
        exclusions: 'sudo.app'

    - name: Upload artifact
      if: ${{ inputs.archive_all }}
      continue-on-error: true
      uses: deep-soft/upload-artifact@main
      with:
        name: sets.zip
        path: sets.zip

    - name: Print REVISION
      continue-on-error: true
      shell: bash
      run: |
        echo "Version: ${{ env.PROG_VER }}";
        echo "Revision: ${{ env.PROG_REVISION }}";
